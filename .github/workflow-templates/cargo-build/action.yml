name: Cargo build
description: |
  Builds dancekit with given features.

inputs:
  features:
    description: features to include in the build (comma separated)
    required: false

runs:
  using: "composite"
  steps:
    - name: Run sccache-cache
      uses: mozilla-actions/sccache-action@v0.0.3
    - name: Setup Variables
      shell: bash
      run: |
        echo "CARGO_INCREMENTAL=0" >> $GITHUB_ENV
        echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
        echo "SCCACHE_CACHE_SIZE=100GB" >> $GITHUB_ENV
        # Set RUSTFLAGS if not already set
        if [ -z "$RUSTFLAGS" ]; then
          echo "RUSTFLAGS=-C opt-level=3 -D warnings -C linker=clang -C link-arg=-fuse-ld=$(pwd)/mold/bin/mold" >> $GITHUB_ENV
        fi
    - name: Setup Mold Linker
      shell: bash
      run: |
        mkdir -p mold
        curl -L --retry 10 --silent --show-error https://github.com/rui314/mold/releases/download/v1.1.1/mold-1.1.1-$(uname -m)-linux.tar.gz | tar -C $(realpath mold) --strip-components=1 -xzf -
    # With rustup's nice new toml format, we just need to run rustup show to install the toolchain
    # https://github.com/actions-rs/toolchain/issues/126#issuecomment-782989659
    - name: Setup Rust toolchain
      shell: bash
      run: |
        if ! which "rustup" > /dev/null; then
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        fi
        rustup show
    - name: Build Node
      shell: bash
      run: |
        env
        params=" --release"
        if [ -n "${{ github.event.inputs.features }}" ]; then
          params="$params --features ${{ github.event.inputs.features }}"
        fi
        echo "cargo build $params"
        cargo build $params